// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/slack/client.go

// Package slack is a generated GoMock package.
package slack

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchMessages mocks base method.
func (m *MockClient) FetchMessages(ctx context.Context, channelID string, from, to time.Time) ([]slack.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessages", ctx, channelID, from, to)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessages indicates an expected call of FetchMessages.
func (mr *MockClientMockRecorder) FetchMessages(ctx, channelID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessages", reflect.TypeOf((*MockClient)(nil).FetchMessages), ctx, channelID, from, to)
}

// FetchReactions mocks base method.
func (m *MockClient) FetchReactions(ctx context.Context, channelID, timestamp string) ([]slack.ItemReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReactions", ctx, channelID, timestamp)
	ret0, _ := ret[0].([]slack.ItemReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchReactions indicates an expected call of FetchReactions.
func (mr *MockClientMockRecorder) FetchReactions(ctx, channelID, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReactions", reflect.TypeOf((*MockClient)(nil).FetchReactions), ctx, channelID, timestamp)
}

// ListenEvents mocks base method.
func (m *MockClient) ListenEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenEvents indicates an expected call of ListenEvents.
func (mr *MockClientMockRecorder) ListenEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvents", reflect.TypeOf((*MockClient)(nil).ListenEvents), ctx)
}

// OpenConversationContext mocks base method.
func (m *MockClient) OpenConversationContext(ctx context.Context, params *slack.OpenConversationParameters) (*slack.Channel, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConversationContext", ctx, params)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// OpenConversationContext indicates an expected call of OpenConversationContext.
func (mr *MockClientMockRecorder) OpenConversationContext(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConversationContext", reflect.TypeOf((*MockClient)(nil).OpenConversationContext), ctx, params)
}

// OpenViewContext mocks base method.
func (m *MockClient) OpenViewContext(ctx context.Context, triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenViewContext", ctx, triggerID, view)
	ret0, _ := ret[0].(*slack.ViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenViewContext indicates an expected call of OpenViewContext.
func (mr *MockClientMockRecorder) OpenViewContext(ctx, triggerID, view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenViewContext", reflect.TypeOf((*MockClient)(nil).OpenViewContext), ctx, triggerID, view)
}

// PostEphemeralContext mocks base method.
func (m *MockClient) PostEphemeralContext(ctx context.Context, channel, user string, options ...slack.MsgOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostEphemeralContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEphemeralContext indicates an expected call of PostEphemeralContext.
func (mr *MockClientMockRecorder) PostEphemeralContext(ctx, channel, user interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEphemeralContext", reflect.TypeOf((*MockClient)(nil).PostEphemeralContext), varargs...)
}

// PostMessageContext mocks base method.
func (m *MockClient) PostMessageContext(ctx context.Context, channel string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessageContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessageContext indicates an expected call of PostMessageContext.
func (mr *MockClientMockRecorder) PostMessageContext(ctx, channel interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessageContext", reflect.TypeOf((*MockClient)(nil).PostMessageContext), varargs...)
}

// RegisterCommandHandler mocks base method.
func (m *MockClient) RegisterCommandHandler(command string, handler CommandHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCommandHandler", command, handler)
}

// RegisterCommandHandler indicates an expected call of RegisterCommandHandler.
func (mr *MockClientMockRecorder) RegisterCommandHandler(command, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommandHandler", reflect.TypeOf((*MockClient)(nil).RegisterCommandHandler), command, handler)
}

// RegisterEventHandler mocks base method.
func (m *MockClient) RegisterEventHandler(eventType string, handler EventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterEventHandler", eventType, handler)
}

// RegisterEventHandler indicates an expected call of RegisterEventHandler.
func (mr *MockClientMockRecorder) RegisterEventHandler(eventType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventHandler", reflect.TypeOf((*MockClient)(nil).RegisterEventHandler), eventType, handler)
}

// RegisterInteractiveHandler mocks base method.
func (m *MockClient) RegisterInteractiveHandler(interactionType slack.InteractionType, callbackID string, handler InteractiveHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterInteractiveHandler", interactionType, callbackID, handler)
}

// RegisterInteractiveHandler indicates an expected call of RegisterInteractiveHandler.
func (mr *MockClientMockRecorder) RegisterInteractiveHandler(interactionType, callbackID, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInteractiveHandler", reflect.TypeOf((*MockClient)(nil).RegisterInteractiveHandler), interactionType, callbackID, handler)
}

// UploadFileV2Context mocks base method.
func (m *MockClient) UploadFileV2Context(ctx context.Context, params slack.UploadFileV2Parameters) (*slack.FileSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileV2Context", ctx, params)
	ret0, _ := ret[0].(*slack.FileSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileV2Context indicates an expected call of UploadFileV2Context.
func (mr *MockClientMockRecorder) UploadFileV2Context(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileV2Context", reflect.TypeOf((*MockClient)(nil).UploadFileV2Context), ctx, params)
}
